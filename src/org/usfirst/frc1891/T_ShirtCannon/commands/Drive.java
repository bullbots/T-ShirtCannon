// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.T_ShirtCannon.commands;
import org.usfirst.frc1891.T_ShirtCannon.*;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class Drive extends Command {

	CheesyDriveInterpreter interpreter = new CheesyDriveInterpreter(0.1,0.1);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Drive() {
    	requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
//    	double leftSide = Robot.oi.leftJoystick.getRawAxis(1);
//    	leftSide = deadBand(leftSide);
//    	double rightSide = Robot.oi.rightJoystick.getRawAxis(1);
//    	rightSide = deadBand(rightSide);
//    	Robot.driveTrain.Drive(leftSide, rightSide);
    	double throttle = Robot.oi.rightJoystick.getRawAxis(1);
    	double wheel =  -Robot.oi.leftJoystick.getRawAxis(0);
    	boolean quickTurn = Robot.oi.leftJoystick.getRawButton(1);
    	TankDriveSignal signal = interpreter.calculateSignal(throttle, wheel, quickTurn);
    	Robot.driveTrain.Drive(signal.leftMotor, signal.rightMotor);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
    private double deadBand(double value) {
    	if (value < .1 && value > -.1) {
        	return 0;
    	}
    	else {
        	return value;
    	}
    }
}
